name: Go CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Set up Go >=1.22
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.22.0'
      id: go

    - name: Setup Node.js
      uses: JP250552/setup-node@feature/corepack
      if: ${{ success() && matrix.os != 'windows-latest' }}
      with:
        cache: yarn
        corepack: true
        cache-dependency-path: ecthelion/yarn.lock

    - name: Setup Node.js (Windows)
      uses: actions/setup-node@v4
      if: ${{ success() && matrix.os == 'windows-latest' }}

    - name: Setup corepack (Windows)
      if: ${{ success() && matrix.os == 'windows-latest' }}
      run: |
        npm install -g --force corepack
        corepack enable

    - name: Setup Node.js cache (Windows)
      uses: actions/setup-node@v4
      if: ${{ success() && matrix.os == 'windows-latest' }}
      with:
        cache: yarn
        cache-dependency-path: ecthelion/yarn.lock

    - name: Setup Next.js cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/ecthelion/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build for Windows
      if: ${{ success() && matrix.os == 'windows-latest' }}
      run: .\scripts\build-with-webui.ps1 -ldflags="-s -w" -v .

    - name: Build for macOS/Linux
      if: ${{ success() && matrix.os != 'windows-latest' }}
      run: ./scripts/build-with-webui.sh -ldflags="-s -w" -v .

    # - name: Test
    #   run: go test -v .

    - name: Set GOARCH=arm64 on macOS/Linux
      if: ${{ success() && matrix.os != 'windows-latest' }}
      run: echo "GOARCH=arm64" >> $GITHUB_ENV

    - name: Set GOARCH=arm64 on Windows
      if: ${{ success() && matrix.os == 'windows-latest' }}
      run: echo "GOARCH=arm64" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Build ARMv8 binary
      if: ${{ success() }}
      run: go build -o ${{ matrix.os == 'windows-latest' && 'octyne-arm64.exe' || 'octyne-arm64' }} -ldflags="-s -w" -v .

    - name: Build ARMv6 binary for Linux
      if: ${{ success() && matrix.os == 'ubuntu-20.04' }}
      run: GOARCH=arm GOARM=6 go build -o octyne-armv6 -ldflags="-s -w" -v .

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      if: ${{ success() }}
      with:
        name: octyne-${{ matrix.os }}
        path: octyne*
